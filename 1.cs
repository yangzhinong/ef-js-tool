// Generated by https://quicktype.io

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class YamlJson
    {
        [JsonProperty("openapi")]
        public string Openapi { get; set; }

        [JsonProperty("servers")]
        public Server[] Servers { get; set; }

        [JsonProperty("info")]
        public Info Info { get; set; }

        [JsonProperty("paths")]
        public Paths Paths { get; set; }

        [JsonProperty("components")]
        public Components Components { get; set; }
    }

    public partial class Components
    {
        [JsonProperty("parameters")]
        public Parameters Parameters { get; set; }

        [JsonProperty("responses")]
        public ComponentsResponses Responses { get; set; }

        [JsonProperty("schemas")]
        public Schemas Schemas { get; set; }
    }

    public partial class Parameters
    {
        [JsonProperty("PageSize")]
        public Page PageSize { get; set; }

        [JsonProperty("PageIndex")]
        public Page PageIndex { get; set; }

        [JsonProperty("SortField")]
        public IsDesc SortField { get; set; }

        [JsonProperty("IsDesc")]
        public IsDesc IsDesc { get; set; }

        [JsonProperty("Status")]
        public Status Status { get; set; }
    }

    public partial class IsDesc
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("in")]
        public string In { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("allowEmptyValue", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public bool? AllowEmptyValue { get; set; }

        [JsonProperty("schema")]
        public IsDescSchema Schema { get; set; }
    }

    public partial class IsDescSchema
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("default")]
        public string Default { get; set; }
    }

    public partial class Page
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("in")]
        public string In { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("schema")]
        public PageIndexSchema Schema { get; set; }
    }

    public partial class PageIndexSchema
    {
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("minimum")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Minimum { get; set; }

        [JsonProperty("default")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Default { get; set; }
    }

    public partial class Status
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("in")]
        public string In { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("style")]
        public string Style { get; set; }

        [JsonProperty("schema")]
        public StatusSchema Schema { get; set; }
    }

    public partial class StatusSchema
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("items")]
        public IdClass Items { get; set; }

        [JsonProperty("uniqueItems")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public bool UniqueItems { get; set; }
    }

    public partial class IdClass
    {
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    public partial class ComponentsResponses
    {
        [JsonProperty("Standard400ErrorResponse")]
        public Standard400ErrorResponse Standard400ErrorResponse { get; set; }

        [JsonProperty("Standard200SuccessResponse")]
        public Standard20SuccessResponse Standard200SuccessResponse { get; set; }

        [JsonProperty("Standard201SuccessResponse")]
        public Standard20SuccessResponse Standard201SuccessResponse { get; set; }
    }

    public partial class Standard20SuccessResponse
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("content")]
        public Standard200SuccessResponseContent Content { get; set; }
    }

    public partial class Standard200SuccessResponseContent
    {
        [JsonProperty("application/json")]
        public PurpleApplicationJson ApplicationJson { get; set; }
    }

    public partial class PurpleApplicationJson
    {
        [JsonProperty("schema")]
        public PurpleSchema Schema { get; set; }
    }

    public partial class PurpleSchema
    {
        [JsonProperty("required")]
        public string[] SchemaRequired { get; set; }

        [JsonProperty("properties")]
        public PurpleProperties Properties { get; set; }
    }

    public partial class PurpleProperties
    {
        [JsonProperty("message")]
        public IdClass Message { get; set; }
    }

    public partial class Standard400ErrorResponse
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("content")]
        public Standard400ErrorResponseContent Content { get; set; }
    }

    public partial class Standard400ErrorResponseContent
    {
        [JsonProperty("application/json")]
        public FluffyApplicationJson ApplicationJson { get; set; }
    }

    public partial class FluffyApplicationJson
    {
        [JsonProperty("schema")]
        public FluffySchema Schema { get; set; }
    }

    public partial class FluffySchema
    {
        [JsonProperty("required")]
        public string[] SchemaRequired { get; set; }

        [JsonProperty("properties")]
        public FluffyProperties Properties { get; set; }
    }

    public partial class FluffyProperties
    {
        [JsonProperty("errorCode")]
        public IdClass ErrorCode { get; set; }

        [JsonProperty("message")]
        public IdClass Message { get; set; }
    }

    public partial class Schemas
    {
        [JsonProperty("Paging")]
        public Paging Paging { get; set; }

        [JsonProperty("Sort")]
        public SortClass Sort { get; set; }

        [JsonProperty("ListData")]
        public ListData ListData { get; set; }
    }

    public partial class ListData
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("required")]
        public string[] ListDataRequired { get; set; }

        [JsonProperty("properties")]
        public ListDataProperties Properties { get; set; }
    }

    public partial class ListDataProperties
    {
        [JsonProperty("id")]
        public IdClass Id { get; set; }

        [JsonProperty("partCode")]
        public SortClass PartCode { get; set; }

        [JsonProperty("partName")]
        public SortClass PartName { get; set; }

        [JsonProperty("warehouseName")]
        public SortClass WarehouseName { get; set; }

        [JsonProperty("costPrice")]
        public CostPrice CostPrice { get; set; }

        [JsonProperty("totalQuantity")]
        public SortClass TotalQuantity { get; set; }

        [JsonProperty("stockCost")]
        public CostPrice StockCost { get; set; }
    }

    public partial class CostPrice
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("format")]
        public string Format { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("minimum", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long? Minimum { get; set; }
    }

    public partial class SortClass
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }
    }

    public partial class Paging
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("required")]
        public string[] PagingRequired { get; set; }

        [JsonProperty("properties")]
        public PagingProperties Properties { get; set; }
    }

    public partial class PagingProperties
    {
        [JsonProperty("pageIndex")]
        public CostPrice PageIndex { get; set; }

        [JsonProperty("pageSize")]
        public CostPrice PageSize { get; set; }

        [JsonProperty("sort")]
        public ItemsClass Sort { get; set; }

        [JsonProperty("totalElements")]
        public CostPrice TotalElements { get; set; }

        [JsonProperty("totalPages")]
        public CostPrice TotalPages { get; set; }
    }

    public partial class ItemsClass
    {
        [JsonProperty("$ref")]
        public string Ref { get; set; }
    }

    public partial class Info
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }
    }

    public partial class Paths
    {
        [JsonProperty("/ui/partStockCost/init")]
        public UiPartStockCostInit UiPartStockCostInit { get; set; }

        [JsonProperty("/partStockCosts")]
        public PartStockCosts PartStockCosts { get; set; }

        [JsonProperty("/partStockCosts/export")]
        public PartStockCostsExport PartStockCostsExport { get; set; }
    }

    public partial class PartStockCosts
    {
        [JsonProperty("get")]
        public PartStockCostsGet Get { get; set; }
    }

    public partial class PartStockCostsGet
    {
        [JsonProperty("summary")]
        public string Summary { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("tags")]
        public string[] Tags { get; set; }

        [JsonProperty("parameters")]
        public Parameter[] Parameters { get; set; }

        [JsonProperty("responses")]
        public Dictionary<string, Response> Responses { get; set; }
    }

    public partial class Parameter
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("in", NullValueHandling = NullValueHandling.Ignore)]
        public string In { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("schema", NullValueHandling = NullValueHandling.Ignore)]
        public IdClass Schema { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }
    }

    public partial class Response
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("content", NullValueHandling = NullValueHandling.Ignore)]
        public ResponseContent Content { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }
    }

    public partial class ResponseContent
    {
        [JsonProperty("application/json")]
        public TentacledApplicationJson ApplicationJson { get; set; }
    }

    public partial class TentacledApplicationJson
    {
        [JsonProperty("schema")]
        public TentacledSchema Schema { get; set; }
    }

    public partial class TentacledSchema
    {
        [JsonProperty("required")]
        public string[] SchemaRequired { get; set; }

        [JsonProperty("properties")]
        public TentacledProperties Properties { get; set; }
    }

    public partial class TentacledProperties
    {
        [JsonProperty("message")]
        public IdClass Message { get; set; }

        [JsonProperty("payload")]
        public PurplePayload Payload { get; set; }
    }

    public partial class PurplePayload
    {
        [JsonProperty("required")]
        public string[] PayloadRequired { get; set; }

        [JsonProperty("allOf")]
        public AllOf[] AllOf { get; set; }
    }

    public partial class AllOf
    {
        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public AllOfProperties Properties { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }
    }

    public partial class AllOfProperties
    {
        [JsonProperty("content")]
        public PropertiesContent Content { get; set; }
    }

    public partial class PropertiesContent
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("items")]
        public ItemsClass Items { get; set; }
    }

    public partial class PartStockCostsExport
    {
        [JsonProperty("get")]
        public PartStockCostsExportGet Get { get; set; }
    }

    public partial class PartStockCostsExportGet
    {
        [JsonProperty("summary")]
        public string Summary { get; set; }

        [JsonProperty("tags")]
        public string[] Tags { get; set; }

        [JsonProperty("parameters")]
        public Parameter[] Parameters { get; set; }

        [JsonProperty("responses")]
        public PurpleResponses Responses { get; set; }
    }

    public partial class PurpleResponses
    {
        [JsonProperty("200")]
        public Purple200 The200 { get; set; }
    }

    public partial class Purple200
    {
        [JsonProperty("description")]
        public string Description { get; set; }
    }

    public partial class UiPartStockCostInit
    {
        [JsonProperty("get")]
        public UiPartStockCostInitGet Get { get; set; }
    }

    public partial class UiPartStockCostInitGet
    {
        [JsonProperty("summary")]
        public string Summary { get; set; }

        [JsonProperty("tags")]
        public string[] Tags { get; set; }

        [JsonProperty("responses")]
        public FluffyResponses Responses { get; set; }
    }

    public partial class FluffyResponses
    {
        [JsonProperty("200")]
        public Fluffy200 The200 { get; set; }
    }

    public partial class Fluffy200
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("content")]
        public The200_Content Content { get; set; }
    }

    public partial class The200_Content
    {
        [JsonProperty("application/json")]
        public StickyApplicationJson ApplicationJson { get; set; }
    }

    public partial class StickyApplicationJson
    {
        [JsonProperty("schema")]
        public StickySchema Schema { get; set; }
    }

    public partial class StickySchema
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("required")]
        public string[] SchemaRequired { get; set; }

        [JsonProperty("properties")]
        public StickyProperties Properties { get; set; }
    }

    public partial class StickyProperties
    {
        [JsonProperty("message")]
        public IdClass Message { get; set; }

        [JsonProperty("payload")]
        public FluffyPayload Payload { get; set; }
    }

    public partial class FluffyPayload
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("required")]
        public string[] PayloadRequired { get; set; }

        [JsonProperty("properties")]
        public PayloadProperties Properties { get; set; }
    }

    public partial class PayloadProperties
    {
        [JsonProperty("dealerPartWarehouse")]
        public DealerPartWarehouse DealerPartWarehouse { get; set; }
    }

    public partial class DealerPartWarehouse
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("items")]
        public DealerPartWarehouseItems Items { get; set; }
    }

    public partial class DealerPartWarehouseItems
    {
        [JsonProperty("required")]
        public string[] ItemsRequired { get; set; }

        [JsonProperty("properties")]
        public ItemsProperties Properties { get; set; }
    }

    public partial class ItemsProperties
    {
        [JsonProperty("id")]
        public IdClass Id { get; set; }

        [JsonProperty("code")]
        public IdClass Code { get; set; }

        [JsonProperty("name")]
        public IdClass Name { get; set; }
    }

    public partial class Server
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public enum TypeEnum { Integer, String };

    public partial class YamlJson
    {
        public static YamlJson FromJson(string json) => JsonConvert.DeserializeObject<YamlJson>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this YamlJson self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        public static readonly PurpleParseStringConverter Singleton = new PurpleParseStringConverter();
    }

    internal class FluffyParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly FluffyParseStringConverter Singleton = new FluffyParseStringConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "integer":
                    return TypeEnum.Integer;
                case "string":
                    return TypeEnum.String;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Integer:
                    serializer.Serialize(writer, "integer");
                    return;
                case TypeEnum.String:
                    serializer.Serialize(writer, "string");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
